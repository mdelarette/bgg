{"version":3,"sources":["action/index.js","components/Player.js","components/Players.js","components/Games.js","components/Game.js","App.js","reducers/index.js","store/configure.js","serviceWorker.js","index.js"],"names":["setPlayerGames","games","type","payload","uniqueId","value","index","self","slice","findIndex","currentValue","i","r","id","mapDispatchToProps","updatePlayerToStore","playerId","name","bggName","console","log","deletePlayerFromStore","fetchPlayerGames","player","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","getState","uniques","response","ids","responseGame","wrap","_context","prev","next","axios","get","concat","sent","parseString","data","err","_games","items","item","map","x","$","objectid","_","filter","reduce","acc","game","length","min","minplayers","max","maxplayers","t0","error","stop","_x","_x2","apply","this","arguments","connect","_React$useState","React","useState","_React$useState2","slicedToArray","editMode","setEditMode","_React$useState3","_React$useState4","setName","_React$useState5","_React$useState6","setBggName","react_default","createElement","className","onChange","e","target","buttonGroup","buttons","intent","text","onClick","disabled","state","ownProps","players","bgg","props","components_Player","key","nbPlayers","useMemo","filteredGames","undefined","selectGame","App","addPlayer","newPlayer","uuid","age","color","fetched","_this","addPlayerToStore","components_Players","components_Game","components_Games","Component","initialState","persistConfig","storage","whitelist","rootReducer","combineReducers","action","produce","draft","push","objectSpread","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistReducer","applyMiddleware","thunk","persistor","persistStore","Boolean","location","hostname","match","ReactDOM","render","es","integration_react","loading","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAwCMA,EAAiB,SAAAC,GAAK,MAAK,CAAEC,KAAM,qBAAsBC,QAASF,IA6CxE,SAASG,EAASC,EAAOC,EAAOC,GAC9B,OAAkG,IAA3FA,EAAKC,MAAMF,EAAQ,GAAGG,UAAU,SAACC,EAAcC,EAAGC,GAAlB,OAAwBF,EAAaG,KAAOR,EAAMQ,KC7E3F,IAmDMC,EAAqB,CACzBC,oBDrCiC,SAACC,EAAUC,EAAMC,GAElD,OADAC,QAAQC,IAAI,sBAAuBJ,EAAUC,EAAMC,GAC5C,CACLhB,KAJyB,gBAKzBC,QAAS,CACPa,WACAC,OACAC,aC+BJG,sBDhDmC,SAAAL,GACnC,MAAO,CACLd,KAHyB,gBAIzBC,QAAS,CACPa,cC6CJM,iBDrB8B,SAAAC,GAAM,sBAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAI,SAAAC,EAAOC,EAAUC,GAAjB,IAAA/B,EAAAgC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAExCrB,QAAQC,IAAI,mBAAoBG,EAAOV,GAAIU,EAAOL,SAG9Ce,EAAU,GAL0BK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAUfC,IAAMC,IAAN,6DAAAC,OAAuEpB,EAAOL,UAV/D,cAUhCgB,EAVgCI,EAAAM,KAWtCC,sBAAYX,EAASY,KAAM,SAASC,EAAKC,GACvC/C,EAAQ+C,EAAOC,MAAMC,KAAKC,IAAI,SAAAC,GAC5B,MAAO,CAAEvC,GAAIuC,EAAEC,EAAEC,SAAUrC,KAAMmC,EAAEnC,KAAK,GAAGsC,OAG/CtB,EAAUhC,EAAMuD,OAAOpD,GAGvB+B,GADIA,EAAMF,EAAQwB,OAAO,SAACC,EAAKC,GAAN,OAAeD,EAAG,GAAAf,OAAMgB,EAAK9C,GAAX,MAAkB,KACnDL,MAAM,EAAG2B,EAAIyB,OAAS,GAnBMtB,EAAAE,KAAA,GAqBXC,IAAMC,IAAN,kDAAAC,OAA4DR,IArBjD,QAqBhCC,EArBgCE,EAAAM,KAsBtCC,sBAAYT,EAAaU,KAAM,SAASC,EAAKC,GAE3C7B,QAAQC,IAAI,gBAAiB4B,EAAOC,OAEpChD,EAAQ+C,EAAOC,MAAMC,KAAKC,IAAI,SAAAC,GAC5B,MAAO,CAAEvC,GAAIuC,EAAEC,EAAExC,GAAII,KAAMmC,EAAEnC,KAAK,GAAGoC,EAAEhD,MAAOwD,IAAKT,EAAEU,WAAW,GAAGT,EAAEhD,MAAO0D,IAAKX,EAAEY,WAAW,GAAGX,EAAEhD,WA3BjEiC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA2B,GAAA3B,EAAA,SAqCtCnB,QAAQ+C,MAAR5B,EAAA2B,IArCsC,QAwCxClC,EAAS/B,EAAeC,IAxCgB,yBAAAqC,EAAA6B,SAAArC,EAAA,kBAAJ,gBAAAsC,EAAAC,GAAA,OAAA7C,EAAA8C,MAAAC,KAAAC,YAAA,KCwBvBC,cACb,KACA3D,EAFa2D,CAzDA,SAAAjD,GAA8E,IAA3ED,EAA2EC,EAA3ED,OAAQR,EAAmES,EAAnET,oBAAqBM,EAA8CG,EAA9CH,sBAAuBC,EAAuBE,EAAvBF,iBAAuBoD,EAC3DC,IAAMC,UAAS,GAD4CC,EAAApD,OAAAqD,EAAA,EAAArD,CAAAiD,EAAA,GACpFK,EADoFF,EAAA,GAC1EG,EAD0EH,EAAA,GAAAI,EAEnEN,IAAMC,SAASrD,EAAON,MAF6CiE,EAAAzD,OAAAqD,EAAA,EAAArD,CAAAwD,EAAA,GAEpFhE,EAFoFiE,EAAA,GAE9EC,EAF8ED,EAAA,GAAAE,EAG7DT,IAAMC,SAASrD,EAAOL,SAHuCmE,EAAA5D,OAAAqD,EAAA,EAAArD,CAAA2D,EAAA,GAGpFlE,EAHoFmE,EAAA,GAG3EC,EAH2ED,EAAA,GAW3F,OACEE,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,oBACZV,GACCQ,EAAA3D,EAAA4D,cAAA,WACED,EAAA3D,EAAA4D,cAAA,oBACQD,EAAA3D,EAAA4D,cAAA,SAAOtF,KAAK,OAAOe,KAAK,OAAOZ,MAAOY,EAAMyE,SAAU,SAAAC,GAAC,OAAIR,EAAQQ,EAAEC,OAAOvF,WAEpFkF,EAAA3D,EAAA4D,cAAA,mBACOD,EAAA3D,EAAA4D,cAAA,SAAOtF,KAAK,OAAOe,KAAK,UAAUZ,MAAOa,EAASwE,SAAU,SAAAC,GAAC,OAAIL,EAAWK,EAAEC,OAAOvF,WAE5FkF,EAAA3D,EAAA4D,cAAA,WACED,EAAA3D,EAAA4D,cAACK,EAAA,EAAD,KACEN,EAAA3D,EAAA4D,cAACM,EAAA,EAAD,CAAQC,OAAO,UAAUC,KAAK,QAAQC,QAjBpC,WACZlF,EAAoBQ,EAAOV,GAAII,EAAMC,GACrC8D,GAAY,MAgBFO,EAAA3D,EAAA4D,cAACM,EAAA,EAAD,CAAQC,OAAO,OAAOC,KAAK,SAASC,QAAS,kBAAMjB,GAAY,UAMrED,GACAQ,EAAA3D,EAAA4D,cAAA,WACED,EAAA3D,EAAA4D,cAAA,SAAIjE,EAAON,MACXsE,EAAA3D,EAAA4D,cAAA,SAAIjE,EAAOL,SACXqE,EAAA3D,EAAA4D,cAAA,WACED,EAAA3D,EAAA4D,cAACK,EAAA,EAAD,KACEN,EAAA3D,EAAA4D,cAACM,EAAA,EAAD,CAAQC,OAAO,UAAUC,KAAK,OAAOC,QAAS,kBAAMjB,GAAY,MAChEO,EAAA3D,EAAA4D,cAACM,EAAA,EAAD,CAAQC,OAAO,SAASC,KAAK,SAASC,QAAS,kBAAM5E,EAAsBE,EAAOV,OAClF0E,EAAA3D,EAAA4D,cAACM,EAAA,EAAD,CAAQC,OAAO,OAAOC,KAAK,QAAQC,QAAS,kBAAM3E,EAAiBC,IAAS2E,UAAW3E,EAAOL,gBC1B7FuD,cANS,SAAC0B,EAAOC,GAC9B,MAAO,CACLC,QAASF,EAAMG,IAAID,UAMrB,KAFa5B,CAhBC,SAAA8B,GACd,OACEhB,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,6BACZc,EAAMF,QAAQlD,IAAI,SAAC5B,EAAQjB,GAAT,OACjBiF,EAAA3D,EAAA4D,cAACgB,EAAD,CAAQC,IAAKlF,EAAOV,GAAIU,OAAQA,SC0BxC,IAWekD,cAXS,SAAC0B,EAAOC,GAC9B,MAAO,CACLnG,MAAOkG,EAAMG,IAAIrG,QAWnB,KAFawE,CApCf,SAAAjD,GAA0B,IAATvB,EAASuB,EAATvB,MACf,OACEsF,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,2CACbF,EAAA3D,EAAA4D,cAAA,SAAOC,UAAU,gDACfF,EAAA3D,EAAA4D,cAAA,aACED,EAAA3D,EAAA4D,cAAA,MAAIC,UAAU,WACZF,EAAA3D,EAAA4D,cAAA,kBACAD,EAAA3D,EAAA4D,cAAA,iBACAD,EAAA3D,EAAA4D,cAAA,mBAGJD,EAAA3D,EAAA4D,cAAA,aACGvF,EAAMkD,IAAI,SAAAQ,GAAI,OACb4B,EAAA3D,EAAA4D,cAAA,MAAIiB,IAAK9C,EAAK9C,IACZ0E,EAAA3D,EAAA4D,cAAA,UAAK7B,EAAK1C,MACVsE,EAAA3D,EAAA4D,cAAA,UAAK7B,EAAKE,KACV0B,EAAA3D,EAAA4D,cAAA,UAAK7B,EAAKI,aCgBTU,cAZS,SAAC0B,EAAOC,GAC9B,MAAO,CACLnG,MAAOkG,EAAMG,IAAIrG,MACjByG,UAAWP,EAAMG,IAAID,QAAQzC,SAW/B,KAFaa,CAlCF,SAAA8B,GACX,IAAM5C,EAAOgB,IAAMgC,QACjB,kBAPe,SAAC1G,EAAOyG,GACzB,IAAIE,EAAgB3G,EAAMuD,OAAO,SAAAJ,GAAC,OAAIA,EAAES,KAAO6C,GAAaA,GAAatD,EAAEW,MAC3E,OAAgC,IAAzB6C,EAAchD,YAAeiD,EAAYD,EAAc,GAKtDE,CAAWP,EAAMtG,MAAOsG,EAAMG,YACpC,CAACH,EAAMG,UAAWH,EAAMtG,MAAM2D,SAGhC,OAAKD,EASH4B,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,iEACbF,EAAA3D,EAAA4D,cAAA,UAAK7B,EAAK1C,MACVsE,EAAA3D,EAAA4D,cAAA,kBAAA7C,OAAagB,EAAKE,IAAlB,YAAAlB,OAAgCgB,EAAKI,OATrCwB,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,+BACbF,EAAA3D,EAAA4D,cAAA,2BCLFuB,6MACJC,UAAY,WACV,IAAIC,EAAY,CACdpG,GAAIqG,MACJjG,KAAM,YACNC,QAAS,GACTiG,IAAK,GACLC,MAAO,OACPC,SAAS,GAEXC,EAAKf,MAAMgB,iBAAiBN,4EAI5B,OACE1B,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,wBACbF,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,yBACbF,EAAA3D,EAAA4D,cAAA,UAAQC,UAAU,8BAA8BQ,QAAS1B,KAAKyC,WAA9D,cAIAzB,EAAA3D,EAAA4D,cAACgC,EAAD,OAGFjC,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,yBACbF,EAAA3D,EAAA4D,cAACiC,EAAD,OAGFlC,EAAA3D,EAAA4D,cAAA,OAAKC,UAAU,yBACbF,EAAA3D,EAAA4D,cAACkC,EAAD,eA7BQC,aA0CZ7G,EAAqB,CACzByG,iBLnD8B,SAAAhG,GAC9B,MAAO,CACLrB,KAHsB,aAItBC,QAAS,CACPoB,aKkDSkD,cACb,KACA3D,EAFa2D,CAGbsC,2DCzDIa,EAAe,CACnBvB,QAAS,GAETpG,MAAO,ICCH4H,EAAgB,CACpBpB,IAAK,OACLqB,QAASA,IACTC,UAAW,CAAC,QAGRC,EAAcC,YAAgB,CAClC3B,IDLa,WAAkC,IAAjCH,EAAiC3B,UAAAZ,OAAA,QAAAiD,IAAArC,UAAA,GAAAA,UAAA,GAAzBoD,EAAcM,EAAW1D,UAAAZ,OAAA,EAAAY,UAAA,QAAAqC,EAI/C,OAHA1F,QAAQC,IAAI,eAAgB8G,EAAOhI,MACnCiB,QAAQC,IAAI,eAAgB8G,EAAO/H,SAE3B+H,EAAOhI,MACb,INZsB,aMapB,OAAOiI,YAAQhC,EAAO,SAAAiC,GACpBA,EAAM/B,QAAQgC,KAAKH,EAAO/H,QAAQoB,UAGtC,INPyB,gBMQvB,OAAO4G,YAAQhC,EAAO,SAAAiC,GACpBA,EAAM/B,QAAU+B,EAAM/B,QAAQ7C,OAAO,SAAAJ,GAAC,OAAIA,EAAEvC,KAAOqH,EAAO/H,QAAQa,aAGtE,INFyB,gBMGvB,OAAOmH,YAAQhC,EAAO,SAAAiC,GACpBA,EAAM/B,QAAU+B,EAAM/B,QAAQlD,IAAI,SAAAC,GAAC,OACjCA,EAAEvC,KAAOqH,EAAO/H,QAAQa,SAAWoC,EAAnC3B,OAAA6G,EAAA,EAAA7G,CAAA,GAA4C2B,EAA5C,CAA+CnC,KAAMiH,EAAO/H,QAAQc,KAAMC,QAASgH,EAAO/H,QAAQe,cAIxG,INM8B,qBML5B,OAAOiH,YAAQhC,EAAO,SAAAiC,GACpBA,EAAMnI,MAAQiI,EAAO/H,UAGzB,QACE,OAAOgG,MCpBPoC,EAAmBC,OAAOC,sCAAwCC,IAE3DC,EAAQC,YAAYC,YAAehB,EAAeG,GAAcO,EAAiBO,YAAgBC,OAEjGC,EAAYC,YAAaN,GCVlBO,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACPhE,EAAA3D,EAAA4D,cAACgE,EAAA,EAAD,CAAUb,MAAOA,GACfpD,EAAA3D,EAAA4D,cAACiE,EAAA,EAAD,CAAaC,QAAS,KAAMV,UAAWA,GACrCzD,EAAA3D,EAAA4D,cAACmE,EAAD,QAGJC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.21f7af9a.chunk.js","sourcesContent":["import { parseString } from \"xml2js\";\r\nimport axios from \"axios\";\r\n\r\nexport const ADD_PLAYER = \"ADD_PLAYER\";\r\nexport const addPlayerToStore = player => {\r\n  return {\r\n    type: ADD_PLAYER,\r\n    payload: {\r\n      player\r\n    }\r\n  };\r\n};\r\n\r\nexport const DELETE_PLAYER = \"DELETE_PLAYER\";\r\nexport const deletePlayerFromStore = playerId => {\r\n  return {\r\n    type: DELETE_PLAYER,\r\n    payload: {\r\n      playerId\r\n    }\r\n  };\r\n};\r\n\r\nexport const UPDATE_PLAYER = \"UPDATE_PLAYER\";\r\nexport const updatePlayerToStore = (playerId, name, bggName) => {\r\n  console.log(\"updatePlayerToStore\", playerId, name, bggName);\r\n  return {\r\n    type: UPDATE_PLAYER,\r\n    payload: {\r\n      playerId,\r\n      name,\r\n      bggName\r\n    }\r\n  };\r\n};\r\n\r\n// https://boardgamegeek.com/wiki/page/BGG_XML_API2\r\n\r\nexport const FETCH_PLAYER_GAMES = \"FETCH_PLAYER_GAMES\";\r\n\r\nconst setPlayerGames = games => ({ type: \"FETCH_PLAYER_GAMES\", payload: games });\r\n\r\nexport const fetchPlayerGames = player => async (dispatch, getState) => {\r\n  // Appel Ã  l'api\r\n  console.log(\"fetchPlayerGames\", player.id, player.bggName);\r\n\r\n  var games;\r\n  var uniques = [];\r\n\r\n  // TODO check how we can get rid of \"Access-Control-Allow-Origin\" at https://www.html5rocks.com/en/tutorials/cors/\r\n\r\n  try {\r\n    const response = await axios.get(`https://www.boardgamegeek.com/xmlapi2/collection?username=${player.bggName}`);\r\n    parseString(response.data, function(err, _games) {\r\n      games = _games.items.item.map(x => {\r\n        return { id: x.$.objectid, name: x.name[0]._ };\r\n      });\r\n    });\r\n    uniques = games.filter(uniqueId);\r\n\r\n    var ids = uniques.reduce((acc, game) => acc + `${game.id},`, \"\");\r\n    ids = ids.slice(0, ids.length - 1);\r\n\r\n    const responseGame = await axios.get(`https://www.boardgamegeek.com/xmlapi2/thing?id=${ids}`);\r\n    parseString(responseGame.data, function(err, _games) {\r\n      //   console.log(\"_games=\", _games);\r\n      console.log(\"_games.items=\", _games.items);\r\n\r\n      games = _games.items.item.map(x => {\r\n        return { id: x.$.id, name: x.name[0].$.value, min: x.minplayers[0].$.value, max: x.maxplayers[0].$.value };\r\n      });\r\n\r\n      //   game = _game.items.item[0];\r\n      return;\r\n      // games = _games.items.item.map(x => {\r\n      //   return { id: x.$.objectid, name: x.name[0]._ };\r\n      // });\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n\r\n  dispatch(setPlayerGames(games));\r\n};\r\n\r\nfunction uniqueId(value, index, self) {\r\n  return self.slice(index + 1).findIndex((currentValue, i, r) => currentValue.id === value.id) === -1;\r\n}\r\n","// import React, { Component } from \"react\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Button, ButtonGroup } from \"@blueprintjs/core\";\r\n\r\nimport { updatePlayerToStore, deletePlayerFromStore, fetchPlayerGames } from \"../action\";\r\n\r\nconst Player = ({ player, updatePlayerToStore, deletePlayerFromStore, fetchPlayerGames }) => {\r\n  const [editMode, setEditMode] = React.useState(false);\r\n  const [name, setName] = React.useState(player.name);\r\n  const [bggName, setBggName] = React.useState(player.bggName);\r\n  // const [age, setAge] = React.useState(player.age);\r\n\r\n  const valid = () => {\r\n    updatePlayerToStore(player.id, name, bggName);\r\n    setEditMode(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w3-margin-bottom\">\r\n      {editMode && (\r\n        <div>\r\n          <div>\r\n            Name: <input type=\"text\" name=\"name\" value={name} onChange={e => setName(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            BGG: <input type=\"text\" name=\"bggName\" value={bggName} onChange={e => setBggName(e.target.value)} />\r\n          </div>\r\n          <div>\r\n            <ButtonGroup>\r\n              <Button intent=\"primary\" text=\"Valid\" onClick={valid} />\r\n              <Button intent=\"none\" text=\"Cancel\" onClick={() => setEditMode(false)} />\r\n            </ButtonGroup>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {!editMode && (\r\n        <div>\r\n          <p>{player.name}</p>\r\n          <p>{player.bggName}</p>\r\n          <div>\r\n            <ButtonGroup>\r\n              <Button intent=\"primary\" text=\"Edit\" onClick={() => setEditMode(true)} />\r\n              <Button intent=\"danger\" text=\"Remove\" onClick={() => deletePlayerFromStore(player.id)} />\r\n              <Button intent=\"none\" text=\"Fetch\" onClick={() => fetchPlayerGames(player)} disabled={!player.bggName} />\r\n            </ButtonGroup>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPlayer.propTypes = {\r\n  player: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updatePlayerToStore,\r\n  deletePlayerFromStore,\r\n  fetchPlayerGames\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(Player);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Player from \"./Player\";\r\n\r\nconst Players = props => {\r\n  return (\r\n    <div className=\"w3-border w3-border-black\">\r\n      {props.players.map((player, index) => (\r\n        <Player key={player.id} player={player} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    players: state.bgg.players\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Players);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { HTMLTable } from \"@blueprintjs/core\";\r\n\r\nGames.propTypes = {\r\n  games: PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nfunction Games({ games }) {\r\n  return (\r\n    <div className=\"w3-white w3-margin-top w3-margin-bottom\">\r\n      <table className=\"w3-table w3-striped w3-bordered w3-hoverable\">\r\n        <thead>\r\n          <tr className=\"w3-teal\">\r\n            <th>name</th>\r\n            <th>min</th>\r\n            <th>max</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {games.map(game => (\r\n            <tr key={game.id}>\r\n              <td>{game.name}</td>\r\n              <td>{game.min}</td>\r\n              <td>{game.max}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    games: state.bgg.games\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   fetchReclamation: id => dispatch(fetchReclamation(id)),\r\n//   initDetailsReclamation: () => dispatch(initDetailsReclamation())\r\n// });\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Games);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst selectGame = (games, nbPlayers) => {\r\n  var filteredGames = games.filter(x => x.min <= nbPlayers && nbPlayers <= x.max);\r\n  return filteredGames.length === 0 ? undefined : filteredGames[0];\r\n};\r\n\r\nconst Game = props => {\r\n  const game = React.useMemo(\r\n    () => selectGame(props.games, props.nbPlayers),\r\n    [props.nbPlayers, props.games.length] // update this hook only if nbPlayers changed\r\n  );\r\n\r\n  if (!game) {\r\n    return (\r\n      <div className=\"w3-margin w3-card w3-yellow\">\r\n        <h3>no game :(</h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w3-panel w3-pale-green w3-bottombar w3-border-green w3-border\">\r\n      <h1>{game.name}</h1>\r\n      <h2>{`min: ${game.min} | max: ${game.max}`}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    games: state.bgg.games,\r\n    nbPlayers: state.bgg.players.length\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   fetchReclamation: id => dispatch(fetchReclamation(id)),\r\n//   initDetailsReclamation: () => dispatch(initDetailsReclamation())\r\n// });\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Game);\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport uuid from \"uuid/v4\";\n\nimport \"./App.css\";\n\nimport Players from \"./components/Players\";\nimport Games from \"./components/Games\";\nimport Game from \"./components/Game\";\n\nimport { addPlayerToStore } from \"./action\";\n\nclass App extends Component {\n  addPlayer = () => {\n    let newPlayer = {\n      id: uuid(),\n      name: \"rename me\",\n      bggName: \"\",\n      age: 18,\n      color: \"blue\",\n      fetched: false\n    };\n    this.props.addPlayerToStore(newPlayer);\n  };\n\n  render() {\n    return (\n      <div className=\"w3-row w3-light-blue\">\n        <div className=\"w3-third w3-container\">\n          <button className=\"w3-margin w3-button w3-teal\" onClick={this.addPlayer}>\n            Add player\n          </button>\n\n          <Players />\n        </div>\n\n        <div className=\"w3-third w3-container\">\n          <Game />\n        </div>\n\n        <div className=\"w3-third w3-container\">\n          <Games />\n        </div>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state, ownProps) => {\n//   return {\n//     dataVersion: state.dataVersion\n//   };\n// };\n\nconst mapDispatchToProps = {\n  addPlayerToStore\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","import produce from \"immer\";\r\n\r\nimport { ADD_PLAYER, DELETE_PLAYER, UPDATE_PLAYER, FETCH_PLAYER_GAMES } from \"../action\";\r\n\r\nconst initialState = {\r\n  players: [],\r\n\r\n  games: []\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  console.log(\"action.type=\", action.type);\r\n  console.log(\"action.type=\", action.payload);\r\n\r\n  switch (action.type) {\r\n    case ADD_PLAYER:\r\n      return produce(state, draft => {\r\n        draft.players.push(action.payload.player);\r\n      });\r\n\r\n    case DELETE_PLAYER:\r\n      return produce(state, draft => {\r\n        draft.players = draft.players.filter(x => x.id !== action.payload.playerId);\r\n      });\r\n\r\n    case UPDATE_PLAYER:\r\n      return produce(state, draft => {\r\n        draft.players = draft.players.map(x =>\r\n          x.id !== action.payload.playerId ? x : { ...x, name: action.payload.name, bggName: action.payload.bggName }\r\n        );\r\n      });\r\n\r\n    case FETCH_PLAYER_GAMES:\r\n      return produce(state, draft => {\r\n        draft.games = action.payload;\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport mainReducer from \"../reducers/\";\r\n\r\n// This\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage: storage,\r\n  whitelist: [\"bgg\"]\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  bgg: mainReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(persistReducer(persistConfig, rootReducer), composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport const persistor = persistStore(store);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport App from \"./App\";\nimport { store, persistor } from \"./store/configure\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}