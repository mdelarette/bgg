[{"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\TableRowGameFromId.js":"1","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\TableGamesFromIds.js":"2","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\GameInModal.js":"3","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\index.js":"4","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\store\\configure.js":"5","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\PartySelection.js":"6","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\ModalGame.js":"7","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\reducers\\index.js":"8","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Games.js":"9","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Player.js":"10","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\utils\\Gravatar.js":"11","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\FilteredGames.js":"12","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\contexts\\modal-context.js":"13","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Footer.js":"14","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\action\\index.js":"15","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\selectors\\index.js":"16","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\serviceWorker.js":"17","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\GamesFromIds.js":"18","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\GameRow.js":"19","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Party.js":"20","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\PageGames.js":"21","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\App.js":"22","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Players.js":"23","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Home.js":"24","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\constants\\pages.ts":"25"},{"size":3221,"mtime":1608112751875,"results":"26","hashOfConfig":"27"},{"size":1878,"mtime":1608110304286,"results":"28","hashOfConfig":"27"},{"size":4298,"mtime":1608625350466,"results":"29","hashOfConfig":"27"},{"size":1892,"mtime":1612195472502,"results":"30","hashOfConfig":"27"},{"size":885,"mtime":1554820531033,"results":"31","hashOfConfig":"27"},{"size":571,"mtime":1608559045115,"results":"32","hashOfConfig":"27"},{"size":519,"mtime":1608042284261,"results":"33","hashOfConfig":"27"},{"size":1952,"mtime":1608558513363,"results":"34","hashOfConfig":"27"},{"size":405,"mtime":1573637218842,"results":"35","hashOfConfig":"27"},{"size":5774,"mtime":1608562938481,"results":"36","hashOfConfig":"27"},{"size":6950,"mtime":1570802103405,"results":"37","hashOfConfig":"27"},{"size":518,"mtime":1608113074459,"results":"38","hashOfConfig":"27"},{"size":200,"mtime":1607954802751,"results":"39","hashOfConfig":"27"},{"size":1162,"mtime":1573637145464,"results":"40","hashOfConfig":"27"},{"size":5910,"mtime":1608558207898,"results":"41","hashOfConfig":"27"},{"size":6458,"mtime":1612274929247,"results":"42","hashOfConfig":"27"},{"size":4951,"mtime":499162500000,"results":"43","hashOfConfig":"27"},{"size":1215,"mtime":1573653902655,"results":"44","hashOfConfig":"27"},{"size":5741,"mtime":1607954891081,"results":"45","hashOfConfig":"27"},{"size":2092,"mtime":1608557596711,"results":"46","hashOfConfig":"27"},{"size":4052,"mtime":1608562512225,"results":"47","hashOfConfig":"27"},{"size":5478,"mtime":1612199996698,"results":"48","hashOfConfig":"27"},{"size":920,"mtime":1607964760869,"results":"49","hashOfConfig":"27"},{"size":785,"mtime":1608563477617,"results":"50","hashOfConfig":"27"},{"size":130,"mtime":1573638511166,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"78ydfa",{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"72"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"61"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"97"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\TableRowGameFromId.js",["115","116","117","118"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { getGameRowData } from \"../selectors\";\r\nimport { getNbPlayers } from \"../selectors\";\r\n\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport AvatarGroup from \"@material-ui/lab/AvatarGroup\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { ModalContext } from \"../contexts/modal-context.js\";\r\n\r\nTableRowGameFromId.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    avatarCell: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n    },\r\n    gameName: {\r\n      paddingLeft: theme.spacing(1),\r\n    },\r\n  })\r\n);\r\n\r\nfunction TableRowGameFromId({ id, game, odd, nbPlayers }) {\r\n  const classes = useStyles();\r\n\r\n  if (!game) {\r\n    return null;\r\n  }\r\n\r\n  let backgroundColor = \"bgg-even\";\r\n  if (odd) {\r\n    backgroundColor = \"bgg-odd\";\r\n  }\r\n\r\n  let min = parseInt(game.min);\r\n  let max = parseInt(game.max);\r\n\r\n  let minClass = \"w3-blue\";\r\n  let maxClass = \"w3-blue\";\r\n\r\n  if (nbPlayers === min && nbPlayers === max) {\r\n    minClass = maxClass = \"w3-green\";\r\n  }\r\n\r\n  if (nbPlayers < min || nbPlayers > max) {\r\n    minClass = maxClass = \"w3-red\";\r\n  }\r\n\r\n  return (\r\n    <ModalContext.Consumer>\r\n      {({ modalGameId, setModalGameId }) => (\r\n        <React.Fragment>\r\n          <TableRow key={id}>\r\n            <TableCell\r\n              component=\"th\"\r\n              scope=\"row\"\r\n              className={classes.avatarCell}\r\n            >\r\n              <Avatar\r\n                src={game.thumbnail}\r\n                variant=\"rounded\"\r\n                onClick={() => {\r\n                  setModalGameId(id);\r\n                }}\r\n              />\r\n\r\n              {game.extensions && game.extensions.length > 0 && (\r\n                <AvatarGroup>\r\n                  {game.extensions.map((extension, index) => {\r\n                    var elem = (\r\n                      <Avatar\r\n                        alt={extension.name}\r\n                        src={extension.thumbnail}\r\n                        onClick={() => {\r\n                          setModalGameId(extension.id);\r\n                        }}\r\n                      />\r\n                    );\r\n                    return elem;\r\n                  })}\r\n                </AvatarGroup>\r\n              )}\r\n\r\n              <Typography variant=\"h6\" className={classes.gameName}>\r\n                {game.name}\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell align=\"right\">{game.minAge}</TableCell>\r\n            <TableCell align=\"right\">{game.min}</TableCell>\r\n            <TableCell align=\"right\">{game.max}</TableCell>\r\n          </TableRow>\r\n        </React.Fragment>\r\n      )}\r\n    </ModalContext.Consumer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    game: getGameRowData(state, ownProps),\r\n    nbPlayers: getNbPlayers(state, ownProps),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(TableRowGameFromId);\r\n",["119","120"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\TableGamesFromIds.js",["121"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\GameInModal.js",["122","123"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getGameData } from \"../selectors\";\r\n\r\nimport { get_gravatar } from \"../utils/Gravatar\";\r\n\r\nimport { Avatar, IconButton, Typography } from \"@material-ui/core\";\r\n\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    closeButton: {\r\n      color: theme.palette.secondary.main,\r\n    },\r\n    dialogTitleRoot: {\r\n      backgroundColor: theme.palette.primary.main,\r\n    },\r\n\r\n    dialogContent: {\r\n      backgroundColor: theme.palette.primary.light,\r\n    },\r\n\r\n    dialogActions: {\r\n      backgroundColor: theme.palette.primary.main,\r\n    },\r\n\r\n    dialogTitle: {\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n      alignItems: \"center\",\r\n      color: \"white\",\r\n    },\r\n\r\n    dialogTitleName: {\r\n      flexGrow: 1,\r\n      paddingLeft: theme.spacing(1),\r\n    },\r\n  })\r\n);\r\n\r\nconst GameInModal = ({ id, game, setModalGameId }) => {\r\n  const classes = useStyles();\r\n\r\n  if (!game) {\r\n    return null;\r\n    // return (\r\n    //   <div className=\"w3-margin w3-card w3-yellow\">\r\n    //     <h3>no game :(</h3>\r\n    //   </div>\r\n    // );\r\n  }\r\n\r\n  console.log(JSON.stringify(game, null, 2));\r\n\r\n  const NbPlayers = () => {\r\n    if (game.min === game.max && game.min === \"1\") {\r\n      return `Solo game`;\r\n    }\r\n\r\n    if (game.min === game.max && game.min === \"2\") {\r\n      return `Duel game`;\r\n    }\r\n\r\n    if (game.min === game.max) {\r\n      return `Exactly ${game.min} players`;\r\n    }\r\n\r\n    return `Number of players : from ${game.min} to ${game.max}`;\r\n  };\r\n\r\n  const Owners = () => {\r\n    return game.owners\r\n      ? game.owners.map((owner, index) => <Owner key={index} owner={owner} />)\r\n      : \"\";\r\n  };\r\n\r\n  const Owner = ({ owner }) => {\r\n    var gravatar = owner.email ? get_gravatar(owner.email, 30) : null;\r\n\r\n    if (gravatar) {\r\n      return (\r\n        <img\r\n          alt=\"gravatar\"\r\n          src={gravatar}\r\n          className=\"w3-bar-item w3-circle\"\r\n          style={{ width: \"30px\" }}\r\n        />\r\n      );\r\n    }\r\n\r\n    if (!gravatar && owner.thumbnail) {\r\n      return (\r\n        <img\r\n          alt=\"thumbnail\"\r\n          src={owner.thumbnail}\r\n          className=\"w3-bar-item w3-circle\"\r\n          style={{ width: \"30px\" }}\r\n        />\r\n      );\r\n    }\r\n\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DialogTitle className={classes.dialogTitleRoot}>\r\n        <div className={classes.dialogTitle}>\r\n          <Avatar src={game.thumbnail} variant=\"rounded\" />\r\n          <Typography variant=\"h6\" className={classes.dialogTitleName}>\r\n            {game.name}\r\n          </Typography>\r\n          <IconButton\r\n            className={classes.closeButton}\r\n            onClick={() => {\r\n              setModalGameId(\"0\");\r\n            }}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <DialogContent className={classes.dialogContent}>\r\n        <Typography variant=\"h6\">\r\n          <NbPlayers />\r\n        </Typography>\r\n        <Typography variant=\"h6\">Minimum age: {game.minage}</Typography>\r\n\r\n        <Owners />\r\n\r\n        <Typography variant=\"body1\" style={{ whiteSpace: \"pre-line\" }}>\r\n          {game.description}\r\n        </Typography>\r\n\r\n        <img\r\n          src={game.image}\r\n          alt={\"image illustrating \" + game.name}\r\n          width=\"100%\"\r\n        />\r\n      </DialogContent>\r\n\r\n      <DialogActions className={classes.dialogActions}>\r\n        <p>\r\n          <a href={\"https://boardgamegeek.com/boardgame/\" + id}>\r\n            View on boardgamegeek.com\r\n          </a>\r\n        </p>\r\n\r\n        <p>\r\n          <a href={\"https://melodice.org/playlist/\" + game.name}>\r\n            Melodice.org\r\n          </a>\r\n        </p>\r\n      </DialogActions>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { game: getGameData(state, ownProps) };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(GameInModal);\r\n",["124","125"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\index.js",["126","127","128","129"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\store\\configure.js",[],["130","131"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\PartySelection.js",["132"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getPartySelectionGameIds } from \"../selectors\";\r\n\r\nimport GamesFromIds from \"../components/GamesFromIds\";\r\nimport TableGamesFromIds from \"../components/TableGamesFromIds\";\r\n\r\nfunction PartySelection({ gameIds }) {\r\n  // return <GamesFromIds gameIds={gameIds} />;\r\n  return <TableGamesFromIds gameIds={gameIds} />;\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { gameIds: getPartySelectionGameIds(state) };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(PartySelection);\r\n","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\ModalGame.js",[],["133","134"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\reducers\\index.js",["135"],"import produce from \"immer\";\r\n\r\nimport {\r\n  ADD_PLAYER,\r\n  DELETE_PLAYER,\r\n  UPDATE_PLAYER,\r\n  FETCH_PLAYER_GAMES,\r\n  UPDATE_PARTY,\r\n  UPDATE_GAMES_FILTER,\r\n} from \"../action\";\r\n\r\nconst initialState = {\r\n  players: [\r\n    {\r\n      id: 1,\r\n      bggName: \"Bratac\",\r\n      email: \"bratac@free.fr\",\r\n    },\r\n    {\r\n      id: 2,\r\n      bggName: \"Wallice35\",\r\n      email: \"wallice35@free.fr\",\r\n    },\r\n  ],\r\n  ownership: [],\r\n  games: [],\r\n\r\n  party: {\r\n    nbPlayers: 2,\r\n    minAge: 8,\r\n  },\r\n\r\n  gamesFilter: {\r\n    selectedPlayerId: \"0\",\r\n    filterStatus: \"-1\",\r\n  },\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  // console.log(\"action.type=\", action.type);\r\n  // console.log(\"action.payload=\", action.payload);\r\n\r\n  switch (action.type) {\r\n    case ADD_PLAYER:\r\n      return produce(state, (draft) => {\r\n        draft.players.push(action.payload.player);\r\n      });\r\n\r\n    case DELETE_PLAYER:\r\n      return produce(state, (draft) => {\r\n        draft.players = draft.players.filter(\r\n          (x) => x.id !== action.payload.playerId\r\n        );\r\n      });\r\n\r\n    case UPDATE_PLAYER:\r\n      return produce(state, (draft) => {\r\n        draft.players = draft.players.map((x) =>\r\n          x.id !== action.payload.playerId\r\n            ? x\r\n            : { ...x, ...action.payload.playerData }\r\n        );\r\n      });\r\n\r\n    case UPDATE_PARTY:\r\n      return produce(state, (draft) => {\r\n        draft.party = action.payload.party;\r\n      });\r\n\r\n    case UPDATE_GAMES_FILTER:\r\n      return produce(state, (draft) => {\r\n        draft.gamesFilter = action.payload.gamesFilter;\r\n      });\r\n\r\n    case FETCH_PLAYER_GAMES:\r\n      return produce(state, (draft) => {\r\n        draft.games = draft.games.concat(action.payload.games);\r\n\r\n        draft.ownership = draft.ownership\r\n          .filter((x) => x.playerId !== action.payload.playerId)\r\n          .concat(action.payload.ownership);\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Games.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Player.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\utils\\Gravatar.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\FilteredGames.js",["136"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFilteredGameIds } from \"../selectors\";\r\n\r\nimport TableGamesFromIds from \"../components/TableGamesFromIds\";\r\nimport GamesFromIds from \"../components/GamesFromIds\";\r\n\r\nfunction FilteredGames({ gameIds }) {\r\n  return <TableGamesFromIds gameIds={gameIds} />;\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { gameIds: getFilteredGameIds(state, ownProps) };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(FilteredGames);\r\n","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\contexts\\modal-context.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Footer.js",[],["137","138"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\action\\index.js",["139","140"],"import { parseString } from \"xml2js\";\r\nimport axios from \"axios\";\r\nimport he from \"he\";\r\n\r\nconst axiosConfig = {\r\n  headers: { \"Access-Control-Allow-Origin\": true },\r\n};\r\n\r\nexport const UPDATE_PARTY = \"UPDATE_PARTY\";\r\nexport const updatePartyToStore = (party) => {\r\n  console.log(\"updatePartyToStore !!!\");\r\n  return {\r\n    type: UPDATE_PARTY,\r\n    payload: {\r\n      party,\r\n    },\r\n  };\r\n};\r\n\r\nexport const UPDATE_GAMES_FILTER = \"UPDATE_GAMES_FILTER\";\r\nexport const updateGamesFilterToStore = (gamesFilter) => {\r\n  console.log(\"updateGamesFilterToStore !!!\");\r\n  return {\r\n    type: UPDATE_GAMES_FILTER,\r\n    payload: {\r\n      gamesFilter,\r\n    },\r\n  };\r\n};\r\n\r\nexport const ADD_PLAYER = \"ADD_PLAYER\";\r\nexport const addPlayerToStore = (player) => {\r\n  return {\r\n    type: ADD_PLAYER,\r\n    payload: {\r\n      player,\r\n    },\r\n  };\r\n};\r\n\r\nexport const DELETE_PLAYER = \"DELETE_PLAYER\";\r\nexport const deletePlayerFromStore = (playerId) => {\r\n  return {\r\n    type: DELETE_PLAYER,\r\n    payload: {\r\n      playerId,\r\n    },\r\n  };\r\n};\r\n\r\nexport const UPDATE_PLAYER = \"UPDATE_PLAYER\";\r\nexport const updatePlayerToStore = (playerId, playerData) => {\r\n  console.log(\r\n    \"updatePlayerToStore\",\r\n    playerId,\r\n    JSON.stringify(playerData, null, 2)\r\n  );\r\n  return {\r\n    type: UPDATE_PLAYER,\r\n    payload: {\r\n      playerId,\r\n      playerData,\r\n    },\r\n  };\r\n};\r\n\r\n// https://boardgamegeek.com/wiki/page/BGG_XML_API2\r\n\r\nexport const FETCH_PLAYER_GAMES = \"FETCH_PLAYER_GAMES\";\r\n\r\nconst setPlayerGames = (playerId, ownership, games) => ({\r\n  type: \"FETCH_PLAYER_GAMES\",\r\n  payload: { playerId, ownership, games },\r\n});\r\n\r\nconst gamesFromResponse = (response, playerId) => {\r\n  var games = [];\r\n\r\n  parseString(response.data, function (err, _games) {\r\n    games = _games.items.item.map((x, index) => {\r\n      // console.log(`_games.items.item[${index}]=`, x);\r\n\r\n      let game = {\r\n        gameId: x.$.objectid,\r\n        playerId: playerId,\r\n        // name: x.name[0]._,\r\n        status: x.status[0].$,\r\n      };\r\n\r\n      //console.log(`games[${index}]=`, JSON.stringify(game, null, 2));\r\n\r\n      return game;\r\n    });\r\n  });\r\n\r\n  return games;\r\n};\r\n\r\nexport const fetchPlayerGames = (player) => async (dispatch, getState) => {\r\n  // Appel à l'api\r\n  console.log(\"fetchPlayerGames\", player.id, player.bggName);\r\n\r\n  var games = [];\r\n  var ownership = [];\r\n\r\n  // TODO check how we can get rid of \"Access-Control-Allow-Origin\" at https://www.html5rocks.com/en/tutorials/cors/\r\n\r\n  // TODO treat : answer 202\r\n  // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n  //  <message>\r\n  //   Your request for this collection has been accepted and will be processed.  Please try again later for access.\r\n  //  </message>\r\n\r\n  await axios(\r\n    `https://www.boardgamegeek.com/xmlapi2/collection?username=${player.bggName}`\r\n  )\r\n    .then(async function (response) {\r\n      if (response.code === 202) {\r\n        console.log(\"we should retry\");\r\n      } else {\r\n        games = gamesFromResponse(response, player.id);\r\n      }\r\n\r\n      const nextResponse = await axios.get(\r\n        `https://www.boardgamegeek.com/xmlapi2/collection?username=${player.bggName}`\r\n      );\r\n      ownership = games.filter(uniqueId);\r\n\r\n      // Remove games already known to limit the fetch !\r\n\r\n      var existingIds = getState().bgg.games.map((game) => game.id);\r\n\r\n      var idsArray = ownership.map((o) => o.gameId);\r\n      idsArray = idsArray.filter(\r\n        (id) => existingIds.find((x) => x === id) === undefined\r\n      );\r\n\r\n      if (idsArray.length > 0) {\r\n        var idsQueryString = idsArray.reduce((acc, id) => acc + `${id},`, \"\");\r\n        idsQueryString = idsQueryString.slice(0, idsQueryString.length - 1);\r\n\r\n        const responseGame = await axios.get(\r\n          `https://www.boardgamegeek.com/xmlapi2/thing?id=${idsQueryString}`\r\n        );\r\n        parseString(responseGame.data, function (err, _games) {\r\n          //   console.log(\"_games=\", _games);\r\n          // console.log(\"_games.items=\", _games.items);\r\n\r\n          // TODO check x.$.type === 'boardgameexpansion'\r\n\r\n          games = _games.items.item.map((x, index) => {\r\n            // if (index === 0) {\r\n            // console.log(`_games.items.item[${index}]=`, x);\r\n            // }\r\n\r\n            // if (x.$.id === \"822\") {\r\n            // console.log(`_games.items.item[${index}]=`, x);\r\n            // }\r\n\r\n            let game = {\r\n              id: x.$.id,\r\n              type: x.$.type,\r\n              name: x.name[0].$.value,\r\n              minage: x.minage[0].$.value,\r\n              min: x.minplayers[0].$.value,\r\n              max: x.maxplayers[0].$.value,\r\n              minplaytime: x.minplaytime[0].$.value,\r\n              maxplaytime: x.maxplaytime[0].$.value,\r\n              playingtime: x.playingtime[0].$.value,\r\n              image: x.image[0],\r\n              thumbnail: x.thumbnail[0], // FIT IN 200x150\r\n              description: he.decode(x.description[0]),\r\n            };\r\n\r\n            if (game.type === \"boardgameexpansion\") {\r\n              game.extends = x.link.reduce((accumulator, currentValue) => {\r\n                if (currentValue.$.type === \"boardgameexpansion\") {\r\n                  accumulator.push(currentValue.$.id);\r\n                }\r\n                return accumulator;\r\n              }, []);\r\n            }\r\n\r\n            // console.log(`games[${index}]=`, JSON.stringify(game, null, 2));\r\n\r\n            return game;\r\n          });\r\n          return;\r\n        });\r\n      }\r\n\r\n      dispatch(setPlayerGames(player.id, ownership, games));\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    })\r\n    .then(function () {\r\n      // always executed\r\n      // setLoading(false);\r\n    });\r\n};\r\n\r\nfunction uniqueId(value, index, self) {\r\n  return (\r\n    self\r\n      .slice(index + 1)\r\n      .findIndex(\r\n        (currentValue, i, r) => currentValue.gameId === value.gameId\r\n      ) === -1\r\n  );\r\n}\r\n","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\selectors\\index.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\serviceWorker.js",[],["141","142"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\GamesFromIds.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\GameRow.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Party.js",["143"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { updatePartyToStore } from \"../action\";\r\n\r\nimport { TextField, MenuItem, Paper } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    form: {\r\n      marginTop: theme.spacing(1),\r\n      marginBottom: theme.spacing(1),\r\n      padding: theme.spacing(1),\r\n    },\r\n    formControl: {\r\n      marginTop: theme.spacing(1),\r\n      marginBottom: theme.spacing(1),\r\n    },\r\n  })\r\n);\r\n\r\nconst Party = ({ party, updatePartyToStore }) => {\r\n  const classes = useStyles();\r\n\r\n  const [nbPlayers, setNbPlayers] = React.useState(party.nbPlayers);\r\n  const [minAge, setMinAge] = React.useState(party.minAge);\r\n\r\n  const firstUpdate = React.useRef(true);\r\n\r\n  React.useEffect(() => {\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false;\r\n      return;\r\n    } else {\r\n      updatePartyToStore({ nbPlayers: nbPlayers, minAge: minAge });\r\n      return;\r\n    }\r\n  }, [nbPlayers, minAge, updatePartyToStore]);\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={3} className={classes.form}>\r\n        <TextField\r\n          type=\"number\"\r\n          label=\"Number of players\"\r\n          value={nbPlayers}\r\n          onChange={(e) => setNbPlayers(e.target.value)}\r\n          helperText=\"\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          color=\"secondary\"\r\n          className={classes.formControl}\r\n        />\r\n\r\n        <TextField\r\n          type=\"number\"\r\n          label=\"Age of youngest player\"\r\n          value={minAge}\r\n          onChange={(e) => setMinAge(e.target.value)}\r\n          helperText=\"\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          color=\"secondary\"\r\n          className={classes.formControl}\r\n        />\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    party: state.bgg.party,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updatePartyToStore,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Party);\r\n","C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\PageGames.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\App.js",["144","145","146","147","148","149","150"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Players.js",["151"],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\components\\Home.js",[],"C:\\Users\\mdelarette\\Documents\\VSCode\\bgg\\src\\constants\\pages.ts",[],{"ruleId":"152","severity":1,"message":"153","line":7,"column":36,"nodeType":"154","messageId":"155","endLine":7,"endColumn":41},{"ruleId":"152","severity":1,"message":"156","line":42,"column":5,"nodeType":"154","messageId":"155","endLine":42,"endColumn":20},{"ruleId":"152","severity":1,"message":"157","line":56,"column":5,"nodeType":"154","messageId":"155","endLine":56,"endColumn":13},{"ruleId":"152","severity":1,"message":"158","line":56,"column":16,"nodeType":"154","messageId":"155","endLine":56,"endColumn":24},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"152","severity":1,"message":"153","line":3,"column":36,"nodeType":"154","messageId":"155","endLine":3,"endColumn":41},{"ruleId":"152","severity":1,"message":"153","line":9,"column":36,"nodeType":"154","messageId":"155","endLine":9,"endColumn":41},{"ruleId":"152","severity":1,"message":"163","line":16,"column":8,"nodeType":"154","messageId":"155","endLine":16,"endColumn":17},{"ruleId":"159","replacedBy":"164"},{"ruleId":"161","replacedBy":"165"},{"ruleId":"152","severity":1,"message":"166","line":7,"column":8,"nodeType":"154","messageId":"155","endLine":7,"endColumn":14},{"ruleId":"152","severity":1,"message":"167","line":8,"column":8,"nodeType":"154","messageId":"155","endLine":8,"endColumn":13},{"ruleId":"152","severity":1,"message":"168","line":15,"column":3,"nodeType":"154","messageId":"155","endLine":15,"endColumn":11},{"ruleId":"152","severity":1,"message":"169","line":16,"column":3,"nodeType":"154","messageId":"155","endLine":16,"endColumn":17},{"ruleId":"159","replacedBy":"170"},{"ruleId":"161","replacedBy":"171"},{"ruleId":"152","severity":1,"message":"172","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":20},{"ruleId":"159","replacedBy":"173"},{"ruleId":"161","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":39,"column":1,"nodeType":"177","endLine":87,"endColumn":3},{"ruleId":"152","severity":1,"message":"172","line":6,"column":8,"nodeType":"154","messageId":"155","endLine":6,"endColumn":20},{"ruleId":"159","replacedBy":"178"},{"ruleId":"161","replacedBy":"179"},{"ruleId":"152","severity":1,"message":"180","line":5,"column":7,"nodeType":"154","messageId":"155","endLine":5,"endColumn":18},{"ruleId":"152","severity":1,"message":"181","line":124,"column":13,"nodeType":"154","messageId":"155","endLine":124,"endColumn":25},{"ruleId":"159","replacedBy":"182"},{"ruleId":"161","replacedBy":"183"},{"ruleId":"152","severity":1,"message":"184","line":8,"column":21,"nodeType":"154","messageId":"155","endLine":8,"endColumn":29},{"ruleId":"152","severity":1,"message":"185","line":7,"column":20,"nodeType":"154","messageId":"155","endLine":7,"endColumn":29},{"ruleId":"152","severity":1,"message":"153","line":8,"column":36,"nodeType":"154","messageId":"155","endLine":8,"endColumn":41},{"ruleId":"152","severity":1,"message":"186","line":31,"column":8,"nodeType":"154","messageId":"155","endLine":31,"endColumn":14},{"ruleId":"152","severity":1,"message":"187","line":108,"column":5,"nodeType":"154","messageId":"155","endLine":108,"endColumn":14},{"ruleId":"152","severity":1,"message":"188","line":109,"column":5,"nodeType":"154","messageId":"155","endLine":109,"endColumn":10},{"ruleId":"152","severity":1,"message":"189","line":110,"column":5,"nodeType":"154","messageId":"155","endLine":110,"endColumn":9},{"ruleId":"152","severity":1,"message":"190","line":111,"column":5,"nodeType":"154","messageId":"155","endLine":111,"endColumn":15},{"ruleId":"152","severity":1,"message":"153","line":4,"column":36,"nodeType":"154","messageId":"155","endLine":4,"endColumn":41},"no-unused-vars","'Theme' is defined but never used.","Identifier","unusedVar","'backgroundColor' is assigned a value but never used.","'minClass' is assigned a value but never used.","'maxClass' is assigned a value but never used.","no-native-reassign",["191"],"no-negated-in-lhs",["192"],"'CardMedia' is defined but never used.",["191"],["192"],"'purple' is defined but never used.","'green' is defined but never used.","'useQuery' is defined but never used.","'useQueryClient' is defined but never used.",["191"],["192"],"'GamesFromIds' is defined but never used.",["191"],["192"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["191"],["192"],"'axiosConfig' is assigned a value but never used.","'nextResponse' is assigned a value but never used.",["191"],["192"],"'MenuItem' is defined but never used.","'useEffect' is defined but never used.","'Footer' is defined but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'isFetching' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]